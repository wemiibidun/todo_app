{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","TodoList","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0LA+DeA,MA5Df,SAAkBC,GACd,MAAyBC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAQ,IAAlE,mBAAMC,EAAN,KAAaC,EAAb,KAEMC,EAAWC,iBAAO,MAExBC,qBAAU,WACNF,EAASG,QAAQC,WAGrB,IAAMC,EAAe,SAAAC,GACjBP,EAASO,EAAEC,OAAOV,QAetB,OACI,sBAAMW,UAAY,YAAYC,SAbb,SAAAH,GACjBA,EAAEI,iBAEFhB,EAAMe,SAAS,CACXE,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMjB,IAEVC,EAAS,KAMT,SACKL,EAAME,KACP,qCACA,uBACIoB,KAAO,OACPC,YAAc,wBACdpB,MAASC,EACToB,KAAO,OACPV,UAAY,kBACZW,SAAYd,EACZe,IAAOpB,IAEX,wBAAQQ,UAAY,oBAApB,uBAIA,qCACA,uBACIQ,KAAO,OACPC,YAAc,aACdpB,MAASC,EACToB,KAAO,OACPV,UAAY,aACZW,SAAYd,EACZe,IAAOpB,IAEX,wBAAQQ,UAAY,cAApB,4B,eCDGa,MA/Cf,YAA8D,IAA/CC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,WAC5C,EAAwB9B,mBAAS,CAC7BgB,GAAI,KACJd,MAAO,KAFX,mBAAOD,EAAP,KAAa8B,EAAb,KAaA,OAAI9B,EAAKe,GACE,cAAC,EAAD,CAAUf,KAAOA,EAAMa,SATb,SAAAZ,GACjB4B,EAAW7B,EAAKe,GAAId,GACpB6B,EAAQ,CACJf,GAAI,KACJd,MAAO,QASRyB,EAAMK,KAAI,SAACC,EAAMC,GAAP,OAEb,cADA,CACA,OACIrB,UAAaoB,EAAKE,WAAa,oBAAsB,WADzD,UAKC,qBAAqBC,QAAW,kBAAMR,EAAaK,EAAKjB,KAAxD,SACKiB,EAAKb,MADEa,EAAKjB,IAIjB,sBAAKH,UAAY,QAAjB,UACI,cAAC,IAAD,CACAuB,QAAW,kBAAMP,EAAWI,EAAKjB,KACjCH,UAAY,gBAGZ,cAAC,IAAD,CACGuB,QAAW,kBAAML,EAAQ,CAACf,GAAIiB,EAAKjB,GAAId,MAAO+B,EAAKb,QACnDP,UAAY,mBAfTqB,OC6BJG,MAtDf,WACI,MAA0BrC,mBAAS,IAAnC,mBAAO2B,EAAP,KAAcW,EAAd,KAwCA,OACI,gCACE,4DACA,cAAC,EAAD,CAAUxB,SAzCA,SAAAmB,GAEZ,GAAIA,EAAKb,OAAQ,QAAQmB,KAAKN,EAAKb,MAAnC,CAGA,IAAMoB,EAAQ,CAAIP,GAAJ,mBAAaN,IAE3BW,EAASE,OAgCT,KAGE,cAAC,EAAD,CACAb,MAASA,EACTC,aAjBe,SAAAZ,GACjB,IAAIyB,EAAed,EAAMK,KAAI,SAAAC,GAIzB,OAHGA,EAAKjB,KAAOA,IACXiB,EAAKE,YAAcF,EAAKE,YAErBF,KAEXK,EAASG,IAWPZ,WAzBa,SAAAb,GACd,IAAM0B,EAAY,YAAIf,GAAOgB,QAAO,SAAAV,GAAI,OAAIA,EAAKjB,KAAOA,KAExDsB,EAASI,IAuBRZ,WAnCa,SAACc,EAAQC,GACpBA,EAASzB,OAAQ,QAAQmB,KAAKM,EAASzB,OAG3CkB,GAAS,SAAAQ,GAAI,OAAIA,EAAKd,KAAK,SAAAe,GAAI,OAAKA,EAAK/B,KAAO4B,EAASC,EAAWE,eCR7DC,MATf,WAEE,OACE,qBAAKnC,UAAU,WAAf,SACC,cAAC,EAAD,OCLLoC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.4ff55bc0.chunk.js","sourcesContent":["import React from 'react'\nimport {useState, useEffect, useRef} from 'react' //hooks\n\nfunction TodoForm(props) {\n    const[input, setInput] = useState(props.edit ? props.edit.value : '');\n\n    const inputRef = useRef(null)\n\n    useEffect(() => {\n        inputRef.current.focus() //focus on whatever input text you are working with\n    })\n\n    const handleChange = e => {\n        setInput(e.target.value) //set input to what we type in\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault(); //we don't want the \"add to do\" button to keep refreshing after submitting\n        \n        props.onSubmit({\n            id: Math.floor(Math.random() * 10000),\n            text: input\n        });\n        setInput('');\n\n    };\n\n\n    return (\n        <form className = 'todo-form' onSubmit = {handleSubmit}> \n            {props.edit ? (\n            <>\n            <input \n                type = 'text' \n                placeholder = 'Update your todo list' \n                value = {input} \n                name = 'text' \n                className = 'todo-input edit' \n                onChange = {handleChange}\n                ref = {inputRef}\n            />\n            <button className = 'todo-button edit '>Update</button>\n            </>\n\n            ) : (\n            <>\n            <input \n                type = 'text' \n                placeholder = 'Add a todo' \n                value = {input} \n                name = 'text' \n                className = 'todo-input' \n                onChange = {handleChange}\n                ref = {inputRef}\n            />\n            <button className = 'todo-button'>Add todo</button>\n            </>\n            )}\n \n        </form>\n    );\n}\n\nexport default TodoForm;\n","import React from 'react'; //this is always the first step to create a component\nimport {useState} from 'react';\nimport TodoForm from './TodoForm';\nimport {RiCloseCircleLine } from 'react-icons/ri';\nimport {TiEdit } from 'react-icons/ti';\n\n\nfunction Todo({todos, completeTodo, removeTodo, updateTodo}) {\n    const [edit, setEdit] = useState({\n        id: null,\n        value: ''\n    })\n\n    const submitUpdate = value => {\n        updateTodo(edit.id, value)\n        setEdit({\n            id: null,\n            value: ''\n        })\n    }\n\n    if (edit.id){\n        return <TodoForm edit ={edit} onSubmit = {submitUpdate} />;\n    }\n\n\n    return todos.map((todo, index) => (\n        // this checks if todo is complete or not (toggles if its complete or not)\n        <div \n            className = {todo.isComplete ? 'todo-row complete' : 'todo-row'} \n            key = {index}\n        > \n         {/* this creates your todo tags */}\n         <div key = {todo.id} onClick = {() => completeTodo(todo.id)}>\n             {todo.text}\n         </div>\n\n         <div className = 'icons'>\n             <RiCloseCircleLine \n             onClick = {() => removeTodo(todo.id)} \n             className = 'delete-icon'\n             />\n             \n             <TiEdit \n                onClick = {() => setEdit({id: todo.id, value: todo.text})} \n                className = 'edit-icon'\n             />\n         </div>\n\n\n        </div>\n    ));\n}\n\nexport default Todo\n\n\n\n\n\n","import React from 'react';\nimport {useState} from 'react';\nimport TodoForm from './TodoForm';\nimport Todo from './Todo';\n\nfunction TodoList() {\n    const [todos, setTodos] = useState([]) //set the state\n\n    const addTodo = todo => {\n        //if you type a space or empty string, nothing should happen to todo\n        if(!todo.text || /^\\s*$/.test(todo.text)) {\n            return\n        }\n        const newTodos = [todo, ...todos ]\n\n        setTodos(newTodos)\n    };\n\n\n    const updateTodo = (todoId, newValue) => {\n        if(!newValue.text || /^\\s*$/.test(newValue.text)) {\n            return\n        }\n        setTodos(prev => prev.map (item => (item.id === todoId ? newValue : item)))\n   };\n\n\n\n    const removeTodo = id => {\n         const removeArr = [...todos].filter(todo => todo.id !== id)\n\n         setTodos(removeArr); //check in the array the todo and remove\n    };\n\n   \n    const completeTodo = id => {\n        let updatedTodos = todos.map(todo => {\n            if(todo.id === id){\n                todo.isComplete = !todo.isComplete //toggling between true and false\n            }\n            return todo\n        })\n        setTodos(updatedTodos);\n    }\n\n\n    return (\n        <div>\n          <h1>What's the Plan for today?</h1>  \n          <TodoForm onSubmit={addTodo}/>  {/* pass in todo form */}\n          <Todo \n          todos = {todos} \n          completeTodo = {completeTodo} \n          removeTodo = {removeTodo} \n          updateTodo = {updateTodo}/>\n        </div>\n    )\n}\n\nexport default TodoList\n","import './App.css';\nimport TodoList from './components/TodoList';\n\n//Importing Components\n\n\nfunction App() {\n  \n  return (\n    <div className=\"todo-app\">\n     <TodoList />\n    </div>\n  );\n}\n \nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}